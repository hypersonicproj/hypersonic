package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"hypersonic/internal/interface-adapter/handler/graphql/graph/model"
	"time"
)

// UploadTrack is the resolver for the uploadTrack field.
func (r *mutationResolver) UploadTrack(ctx context.Context, track model.NewTrack) (*model.Track, error) {
	panic(fmt.Errorf("not implemented: UploadTrack - uploadTrack"))
}

// UploadAlbum is the resolver for the uploadAlbum field.
func (r *mutationResolver) UploadAlbum(ctx context.Context, album model.NewAlbum) (*model.Album, error) {
	panic(fmt.Errorf("not implemented: UploadAlbum - uploadAlbum"))
}

// Albums is the resolver for the Albums field.
func (r *queryResolver) Albums(ctx context.Context, sort *model.SortAlbumsBy, order *model.Order) ([]*model.Album, error) {
	_albums, err := r.deps.Search.FindAlbumsNameAsc()
	if err != nil {
		return nil, err
	}
	var albums []*model.Album
	for _, _album := range _albums {
		album := _album.Get()
		albums = append(albums, &model.Album{
			ID:      _album.Id().Text(),
			Title:   album.Title,
			Artist:  album.AlbumArtist.Name,
			AddedAt: album.ReleasedAt.Format(time.RFC3339),
		})
	}
	return albums, nil
}

// Playlists is the resolver for the Playlists field.
func (r *queryResolver) Playlists(ctx context.Context, sort *model.SortPlaylistsBy, order *model.Order) ([]*model.Playlist, error) {
	panic(fmt.Errorf("not implemented: Playlists - Playlists"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
